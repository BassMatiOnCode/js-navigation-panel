<!DOCTYPE html>
<html lang="en-US"><head>
<meta charset="utf-8" />
<meta name="viewport" content="width=device-width, initial-scale=1.0" />
<meta name="editor" content="USP" />
<meta name="change-date" content="2023-09-10" />
<meta name="version" content="1" />
<meta name="tags" content="" />
 
<title>Web Toolbox - Side Panel - Study 1</title>

</head><body>
<p><button id="expand-panel-button">Show</button></p>

<h1>Docking Panel Study 1</h1>

<p>This study experiments with a wrapper around the panel. The wrapper provides some padding space for the botton panel border for a fully expanded panel.</p>

<div id="wrapper">
<div id="panel" dock="top">
<p><button id="collapse-panel-button">Close</button></p>
<ul style="white-space:nowrap">
<li>topic</li>
<li>topic</li>
<li>topic</li>
<li>topic</li>
<li>topic</li>
<li>topic</li>
<li>topic</li>
<li>topic</li>
<li>topic</li>
<li>topic</li>
<li>topic</li>
<li>topic</li>
<li>topic</li>
<li>topic</li>
<li>topic</li>
<li>topic</li>
<li>topic</li>
<li>topic topic topic topic topic topic topic topic topic topic topic topic topic topic topic topic topic topic topic last</li>
<li>topic</li>
<li>topic</li>
<li>topic</li>
<li>last</li>
</ul>
</div>
</div>

<style>
body {
	}
#wrapper {
	/* Provides space at the bottom where the panel border can go */
	position : absolute ;
	top : 0px ;
	right : 0px ;
	bottom : 0px ;
	left : 0px ;
	padding-bottom : 2px ;  /* provides space for the [dock] bottom border */
	border : 1px none orange ;
	display : none; 
	}
[dock] {
	display : block ;
	height : 0px ;
	max-height : 100% ;
	background-color : white ;
	overflow : hidden ;
	transition : height linear 1s ;
	border : 1px solid blue ;
	}
[dock] > div {
	border : 1px solid orange ;
	overflow : scroll ;
	xdisplay : inline-block;
	xposition : absolute ;
	height : 100% ;
	}
</style>

<script id="code-implementation" type="module"> 
export function getPropertyName ( panel ) {
	switch ( panel.getAttribute( "dock" )) {
	case "left" :
	case "right" :
		return "width" ;
	case "top" :
	case "bottom" :
		return "height" ;
	}	}
export function getBorderStyleName ( panel, postfix = "" ) {
	//	Returns the a border style base name, or a complete 
	//	border style name if completed with postfix value.
	switch ( panel.getAttribute( "dock" )) {
	case "left" :
		return "borderRight" + postfix ;
	case "right" :
		return "borderLeft" + postfix ;
	case "top" :
		return "borderBottom" + postfix ;
	case "bottom" :
		return "borderTop" + postfix ;
	}	}
export function setBorder ( panel, style="solid" ) {
	//	style : { "solid" | "none" }
	if ( panel.hasAttribute( "border" )) panel.style[ getBorderStyleName( panel, "Style" ) ] = style ;
	}
export function expand ( panel ) {
	wrapper.style.display = "block" ;
	const property = getPropertyName( panel );
	panel.style[ property ] = "auto" ;
	const length = window.getComputedStyle( panel )[ property ] ;
	panel.style[ property ] = "0px" ;
	setTimeout ( ( ) => {
	setTimeout ( ( ) => {
		panel.style[ property ] = length ;
		} ) } ) ;
	}
export function collapse ( panel ) {
	panel.style.overflow = "hidden" ;
	const property = getPropertyName( panel );
	panel.style[ property ] = window.getComputedStyle( panel )[ property ] ;
	setTimeout ( ( ) => {
	setTimeout ( ( ) => {
		panel.style[ property ] = "0px" ;
		} ) } ) ;
	}
export function transitionEndHandler ( evt ) {
	const property = getPropertyName( evt.target );
	if ( evt.target.style[ property ] === "0px" )
		wrapper.style.display = "none" ;
	else {
		evt.target.style[ property ] = "auto" ;
		evt.target.style.overflow = "auto" ;
	}	}
export function init ( root = document.body ) {
	window[ "expand-panel-button" ].addEventListener( "click", ( ) => {
		expand( panel );
		} ) ;
	window[ "collapse-panel-button" ].addEventListener( "click", ( ) => {
		collapse( panel );
		} ) ;
	for ( const element of root.querySelectorAll( "[dock]" )) {
		element.addEventListener( "transitionend" , transitionEndHandler ) ;
	}	}

init( );
</script>

</body></html>